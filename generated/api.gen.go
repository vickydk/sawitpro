// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phoneNumber"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// Token user token
	Token string `json:"token"`

	// UserUUID The UUID of the user
	UserUUID openapi_types.UUID `json:"userUUID"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	FullName    string `json:"fullName"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phoneNumber"`
}

// SignupResponse defines model for SignupResponse.
type SignupResponse struct {
	// UserUUID The UUID of the user
	UserUUID openapi_types.UUID `json:"userUUID"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	FullName    string `json:"fullName"`
	PhoneNumber string `json:"phoneNumber"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	FullName    string `json:"fullName"`
	PhoneNumber string `json:"phoneNumber"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = SignupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// user login
	// (POST /login)
	Login(ctx echo.Context) error
	// user detail
	// (GET /me)
	MeDetail(ctx echo.Context) error
	// update user detail
	// (PATCH /me)
	UpdateUser(ctx echo.Context) error
	// signup new user
	// (POST /signup)
	Signup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// MeDetail converts echo context to params.
func (w *ServerInterfaceWrapper) MeDetail(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MeDetail(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/me", wrapper.MeDetail)
	router.PATCH(baseURL+"/me", wrapper.UpdateUser)
	router.POST(baseURL+"/signup", wrapper.Signup)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTXPbNhD9K5xtD52WNvVlVebNqZupM0kOkTU9OOoMBKxEKCQA4yOOJsP/3gEoSqIo",
	"WT1YbnsjiQV2972Ht/wOVBZKChTWQPodDM2wIOHxd62l/oRGSWHQf1BaKtSWY1gu0BiyCAt2pRBSMFZz",
	"sYCyjEHjo+MaGaQPm8BpXAfK2RKphTKG93LBxSd8dGhsO4UixjxJzQ7kiEFlUuBHV8xQn65hNzjenvtM",
	"ScfatvILCv/A0FDNleVSQArOoI6qtRjwGylU7o+9GbPrX0erbMmdvLwZM5fJUd9lj09c8CXLDf1CRXLz",
	"0/jn28m7PwouyZIayZcU4nbDPsVkcnfbTn6fYeRXIjmPbIaRj2yU0e+NelcjvLq4vqbzi8FgOLsgrDO8",
	"6A/ojHWvrroj0oMY5lIXxPpuHGftEvYw3dQTr0E5hOaYL4RTRxmeuzz/SIqAc0G+vUexsBmkw04MBRf1",
	"a/8AGrva2N05aOwcxieFs7O5229s7nZ8GmtRe5D/+vz5l2HvJCpNpW36OyG6GqZjqvvPcn+omYlixOLE",
	"oD4H7/8Gewe7DP0dI2y3wZe0rmdKKmMwSJ3mdjX2Ll4VMkOiUd84D0n99rbm+t2f9xBXnu9Pqla3IGXW",
	"Kij9wVzMpd+fc4rrfkXoDj7c3fuWLLdBbR6VaIz6K6de9F9Rm0qn3cvOZcdHSoWCKO6VGT4FlrJQa5J7",
	"7w1gyko1HlLilX7HIK2sGSp40Ng3kq18EJXCogjxRKmc07AjWRoptiPNP/2ocQ4p/JBsZ16yHnhJYxKV",
	"TRKsdhg+VGyHWnudzkvnXmspJN+75GhspNE6LTyEgxfM3ZzyB3K/ISzSG1xiMK4oiF7VMy9fc2LJwgS5",
	"ulnOKUx9aFLpf4EHuPyAt2gJz+GMuDau6D+Btd/217dSzzhjKCIqGTZuGaQPzfv1MC2nLYBY3WaNUHDo",
	"aRhhlmZtZLb2eSapt/35lfV+Dl582HU77Dcp5jnfs8fTxAWEomf58/o2YWwfN6xqrJ+Jxuav1StTuPfD",
	"8r/xrIqxSOBT/afUNq6gFO1HVxCK0/l6FqZJkktK8kwam466oy6U0/LvAAAA///ZhTYWQg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
