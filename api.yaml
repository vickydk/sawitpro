# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost:8181
paths:
  /signup:
    post:
      summary: signup new user
      operationId: signup
      tags:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        200:
          description: Test return
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      summary: user login
      operationId: login
      tags:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Test return
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /me:
    get:
      summary: user detail
      operationId: meDetail
      tags:
        - user
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Test return
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        403:
          description: Forbidden code
    patch:
      summary: update user detail
      operationId: updateUser
      tags:
        - user
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        200:
          description: Test return
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: Forbidden code
        409:
          description: Conflict

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    SignupRequest:
      type: object
      required:
        - phoneNumber
        - fullName
        - password
      properties:
        phoneNumber:
          type: string
          minLength: 10
          maxLength: 13
          pattern: '^\+62'
        fullName:
          type: string
          minLength: 3
          maxLength: 60
        password:
          type: string
          minLength: 6
          maxLength: 64
    SignupResponse:
      type: object
      required:
        - userUUID
      properties:
        userUUID:
          description: The UUID of the user
          type: string
          format: uuid
          example: "328258e5-99cf-446b-ad06-34cbd15518a2"
    LoginRequest:
      type: object
      required:
        - phoneNumber
        - password
      properties:
        phoneNumber:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      required:
        - userUUID
        - token
      properties:
        userUUID:
          description: The UUID of the user
          type: string
          format: uuid
          example: "328258e5-99cf-446b-ad06-34cbd15518a2"
        token:
          description: user token
          type: string
          example: "ASd978yhjiuo.ASduho83uhqwinijdlsckcn/A(S*DUJHmioajcsoijc"
    UpdateUserRequest:
      type: object
      required:
        - phoneNumber
        - fullName
      properties:
        phoneNumber:
          type: string
          minLength: 10
          maxLength: 13
          pattern: '^\+62'
        fullName:
          type: string
          minLength: 3
          maxLength: 60
    UserResponse:
      type: object
      required:
        - phoneNumber
        - fullName
      properties:
        phoneNumber:
          type: string
        fullName:
          type: string